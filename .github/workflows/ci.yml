name: QuoteBox CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  GO_VERSION: '1.20'
  DOCKER_IMAGE: quotebox
  REGISTRY: ghcr.io

jobs:
  # Stage 1: Build and Install Dependencies
  build_install:
    name: Build and Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build application
        run: |
          mkdir -p bin
          go build -v -o bin/quotebox ./cmd/server
          echo "Build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quotebox-binary
          path: bin/quotebox
          retention-days: 1

  # Stage 2: Lint and Security Scanning
  lint_security:
    name: Lint and Security Scan
    runs-on: ubuntu-latest
    needs: build_install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: golangci-lint run ./... --timeout=5m

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.18.2

      - name: Run gosec security scan
        run: gosec -fmt=json -out=gosec-report.json ./...
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report
          path: gosec-report.json
          retention-days: 7

  # Stage 3: Test
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint_security
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: quoteuser
          POSTGRES_PASSWORD: quotepw
          POSTGRES_DB: quotedb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U quoteuser; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Set test environment variables
        run: |
          echo "DATABASE_URL=postgres://quoteuser:quotepw@localhost:5432/quotedb?sslmode=disable" >> $GITHUB_ENV
          echo "OPENROUTER_API_KEY=test_key_for_ci" >> $GITHUB_ENV
          echo "OPENROUTER_MODEL=openrouter/auto" >> $GITHUB_ENV

      - name: Run unit tests
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: Run integration tests
        run: go test ./tests/integration/... -v -tags=integration
        continue-on-error: true

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 7

  # Stage 4: Docker Build and Test
  docker_build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker container for smoke test
        run: |
          docker run -d --name quotebox-test \
            -e OPENROUTER_API_KEY=test_key \
            -e DATABASE_URL=postgres://user:pass@localhost:5432/db \
            -p 8080:8080 \
            ${{ env.DOCKER_IMAGE }}:test
          
          echo "Waiting for container to be ready..."
          sleep 10

      - name: Test health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz || echo "failed")
          echo "Health check response: $response"
          if [ "$response" != "200" ] && [ "$response" != "503" ]; then
            echo "Health check failed with response: $response"
            docker logs quotebox-test
          fi

      - name: Test quotes endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/quotes || echo "failed")
          echo "Quotes endpoint response: $response"

      - name: Stop test container
        if: always()
        run: docker stop quotebox-test && docker rm quotebox-test

      - name: Save Docker image
        run: docker save ${{ env.DOCKER_IMAGE }}:test | gzip > quotebox-image.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: quotebox-image.tar.gz
          retention-days: 1

  # Stage 5: Deploy (Conditional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker_build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata for production
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create release summary
        run: |
          echo "## Release Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Build and publish pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY

  # Summary job to check overall pipeline status
  pipeline_summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build_install, lint_security, test, docker_build]
    if: always()
    steps:
      - name: Check pipeline status
        run: |
          echo "## CI/CD Pipeline Summary ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Install | ${{ needs.build_install.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Security | ${{ needs.lint_security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker_build.result }} |" >> $GITHUB_STEP_SUMMARY
